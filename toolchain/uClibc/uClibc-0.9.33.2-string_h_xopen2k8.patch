diff -ur uClibc-0.9.33.2.org/include/string.h uClibc-0.9.33.2/include/string.h
--- uClibc-0.9.33.2.org/include/string.h	2012-05-15 09:20:09.000000000 +0200
+++ uClibc-0.9.33.2/include/string.h	2013-03-06 20:53:13.000000000 +0100
@@ -126,7 +126,7 @@
      __THROW __nonnull ((2));
 __END_NAMESPACE_STD
 
-#if defined __USE_GNU && defined __UCLIBC_HAS_XLOCALE__
+#if defined __USE_XOPEN2K8 && defined __UCLIBC_HAS_XLOCALE__
 /* The following functions are equivalent to the both above but they
    take the locale they use for the collation as an extra argument.
    This is not standardsized but something like will come.  */
@@ -142,7 +142,8 @@
 libc_hidden_proto(strxfrm_l)
 #endif
 
-#if defined __USE_SVID || defined __USE_BSD || defined __USE_XOPEN_EXTENDED
+#if defined __USE_SVID || defined __USE_BSD || defined __USE_XOPEN_EXTENDED \
+    || defined __USE_XOPEN2K8
 /* Duplicate S, returning an identical malloc'd string.  */
 extern char *strdup (__const char *__s)
      __THROW __attribute_malloc__ __nonnull ((1));
@@ -152,7 +153,7 @@
 /* Return a malloc'd copy of at most N bytes of STRING.  The
    resultant string is terminated even if no null terminator
    appears before STRING[N].  */
-#if defined __USE_GNU
+#if defined __USE_XOPEN2K8
 extern char *strndup (__const char *__string, size_t __n)
      __THROW __attribute_malloc__ __nonnull ((1));
 libc_hidden_proto(strndup)
@@ -278,7 +279,7 @@
 libc_hidden_proto(strlen)
 __END_NAMESPACE_STD
 
-#ifdef	__USE_GNU
+#ifdef	__USE_XOPEN2K8
 /* Find the length of STRING, but scan at most MAXLEN characters.
    If no '\0' terminator is found in that many characters, return MAXLEN.  */
 extern size_t strnlen (__const char *__string, size_t __maxlen)
@@ -418,7 +419,7 @@
 libc_hidden_proto(strsep)
 #endif
 
-#ifdef	__USE_GNU
+#ifdef	__USE_XOPEN2K8
 /* Compare S1 and S2 as strings holding name & indices/version numbers.  */
 extern int strverscmp (__const char *__s1, __const char *__s2)
      __THROW __attribute_pure__ __nonnull ((1, 2));
